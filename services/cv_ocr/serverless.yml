app: cv-ocr
service: cv-ocr
frameworkVersion: '3'

functions:
  cv_question_prod:
    handler: main.questions
    timeout: 60
    events:
      - http:
          path: "/cv_questions_prod"
          method: post
          integration: lambda
    environment: 
      X_APP_KEY: ${env:X_APP_KEY}
      X_APP_SIGN: ${env:X_APP_SIGN}
      WORKSHEET_ID: ${env:PROD_WORKSHEET_ID}      
  cv_question_dev:
    handler: main.questions
    timeout: 60
    events:
      - http:
          path: "/cv_questions_dev"
          method: post
          integration: lambda
    environment: 
      X_APP_KEY: ${env:DEV_X_APP_KEY}
      X_APP_SIGN: ${env:DEV_X_APP_SIGN}
      WORKSHEET_ID: ${env:DEV_WORKSHEET_ID}
  cv_trigger_prod:
    handler: main.trigger_get_questions
    timeout: 60
    events:
      - http:
          path: "/cv_trigger_prod"
          method: post
          integration: lambda
    environment:
      FUNCTION_NAME: ${env:PROD_CV_QUESTION}
  cv_trigger_dev:
    handler: main.trigger_get_questions
    timeout: 60
    events:
      - http:
          path: "/cv_trigger_dev"
          method: post
          integration: lambda
    environment:
      FUNCTION_NAME: ${env:DEV_CV_QUESTION}
  cv_ocr_prod:
    handler: main.parse
    timeout: 30
    events:
      - http:
          path: "/cv_ocr_prod"
          method: post
          integration: lambda
    environment:
      X_APP_KEY: ${env:X_APP_KEY}
      X_APP_SIGN: ${env:X_APP_SIGN}
      WORKSHEET_ID: ${env:PROD_OCR_WORKSHEET_ID}   
  cv_ocr_dev:
    handler: main.parse
    timeout: 30
    events:
      - http:
          path: "/cv_ocr_dev"
          method: post
          integration: lambda
    environment: 
      X_APP_KEY: ${env:DEV_X_APP_KEY}
      X_APP_SIGN: ${env:DEV_X_APP_SIGN}
      WORKSHEET_ID: ${env:DEV_OCR_WORKSHEET_ID}
  cv_ocr_trigger_prod:
    handler: main.trigger_ocr
    timeout: 60
    events:
      - http:
          path: "/cv_ocr_trigger_prod"
          method: post
          integration: lambda
    environment:
      FUNCTION_NAME: ${env:PROD_CV_OCR}
  cv_ocr_trigger_dev:
    handler: main.trigger_ocr
    timeout: 60
    events:
      - http:
          path: "/cv_ocr_trigger_dev"
          method: post
          integration: lambda
    environment:
      FUNCTION_NAME: ${env:DEV_CV_OCR}
package:
  exclude:
    - '!node_modules/**'
    - '!venv/**'
    - '!package-lock.json/**'
    
plugins:
  - serverless-python-requirements  

custom:
  pythonRequirements:
    pythonBin: python3

provider:
  name: aws
  runtime: python3.9
  architecture: x86_64
  region: ap-southeast-1
  iamRoleStatements:
  - Effect: "Allow"
    Action:
      - "lambda:InvokeFunction"
    Resource: "*"
  apiGateway:
    restApiId: jo4yphs17g
    restApiRootResourceId: 9kl7ci3plk
  environment: 
    OPENAI_API_BASE: ${env:AZURE_OPENAI_ENDPOINT}
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    OPENAI_API_TYPE: ${env:OPENAI_API_TYPE}
    OPENAI_API_VERSION: ${env:OPENAI_API_VERSION}
    DEPLOYMENT_NAME: ${env:AZURE_OPENAI_DEPLOYMENT}
    AZURE_VISION_KEY: ${env:AZURE_FORM_ENDPOINT}
    AZURE_VISION_ENDPOINT: ${env:AZURE_VISION_ENDPOINT}
